# Per-service ruff linting
lint.select = [
    "B",  # bugbear
    "C",  # mccabe
    "D",  # PEP257 (pydocstyle)
    "E",  # PEP8 (pycodestyle)
    "F",  # pyflakes
    "I",  # isort
    "W",  # PEP8  (pycodestyle)
]
lint.extend-select = [
    "ARG",  # unused arguments
    "C4",  # comprehensions
    "ERA",  # eradicate,
    "EXE",  # executable
    "ICN",  # import conventions
    "G",  # logging-format
    "NPY",  # numpy-specific rules
    "PL",  # pylint
    "RET",  # returns formatting
    "RUF",  # ruff-specific rules
    "SIM",  # flake8-simplify
    "T",  # print
    "T10",  # breakpoint
    "TID252",  # absolute imports
    "TCH",  # type-checking
    "UP",  # pyupgrade
]
lint.unfixable = [
    "ERA",  # eradicate (removing commented-out code. Too aggressive)
    "UP018",  #  native literals; Unnecessary call to str # (buggy)
]

lint.ignore = [
    "B017",  # self.assertRaises(Exception): should be considered evil. It can lead to your test passing even if the code being tested is never executed due to a typo. (DC-1734)
    "B018",  # Found useless attribute access. Either assign it to a variable or remove it.
    "B019",  # Use of functools.lru_cache or functools.cache on methods can lead to memory leaks (DC-1088)
    "B028",  # No explicit `stacklevel` keyword argument found
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    "B905",  # `zip()` without an explicit `strict=` parameter
    "D100",  # Missing public module docstring
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__
    "D206",  # Docstring tab-indentation (discouraged to use with formatter)
    "E402",  # Module level import not at top of file
    "E501",  # Long literals which Black can't split
    "E741",  # Ambiguous variable name
    "G001",  # Usage of string.format() is prevented by flake8-use-fstring
    "G002",  # Usage of %s is prevented by flake8-use-fstring
    "G004",  # f-strings have to be enabled to support rir_service.Logger
    "PLR0402",  # Use `from {module} import {name}` in lieu of alias (can be in clash with our import conventions)
    "PLR0912",  # Cyclomatic complexity (already checked by mccabe)
    "PLR0913",  # Too many arguments to function call (problematic for ML models which usually need a lot of inputs)
    "PLR2004",  # Magic value used in comparison, consider replacing `{value}` with a constant variable (>600 occurrences, false positives)
    "PLW0120",  # `else` clause on loop without a `break` statement (false positives, we use often return statement)
    "PLW1510",  # `subprocess.run` without explicit `check` argument
    "PLW2901",  #  Outer `{outer_kind}` variable `{name}` overwritten by inner `{inner_kind}` target
    "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar` (over 500 occurrences)
    "RUF017",  # Avoid Quadratic list summation [rule in preview stage]
    "RUF018",  # Assignment in assert [rule in preview stage]
    "RUF019",  # Unnecessary key check [rule in preview stage]
    "RUF200",  # Invalid pyproject TOML (Not monorepo friendly. We miss `name` in individual `pyproject.toml`)
    "SIM103",  # Checks for if statements that can be replaced with bool.
    "SIM117",  # Use a single with statement with multiple contexts instead of nested with statements
    "UP010",  # Unnecessary __future__ import {import} for target Python version -- we require `from __future__ import annotations` everywhere
    "UP030",  # Use implicit references for positional format fields -- personally, I don't like relying on implicit values
    "W191",  # Tab-indentation (discouraged to use with formatter)
]

line-length = 119
target-version = "py312"
extend-exclude = [
    ".git",
    ".mypy_cache",
    "__pycache__",
    ".pytest_cache",
    "config",
    "data",
]

[lint.flake8-type-checking]
exempt-modules = []  # default is `typing`, but we want to include these under guards if possible
runtime-evaluated-decorators = ["dataclasses.dataclass"]

[lint.flake8-unused-arguments]
# No error for unused *args and **kwargs
ignore-variadic-names = true

[lint.isort]
required-imports = ["from __future__ import annotations"]
# must be maintained manually
known-first-party = ["template_filler"]

[lint.pydocstyle]
# Use numpy-style docstrings.
convention = "numpy"

[lint.pylint]
max-returns = 10

[lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 12


[lint.per-file-ignores]
"tests/**" = ["D"]
